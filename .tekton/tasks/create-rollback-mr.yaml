apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-rollback-mr
spec:
  description: |
    reset the pull request, generates pull-request for redhat-appstudio/infra-deployments repository.
  params:
    - name: REVISION
      description: Git reference which was built by the Pipeline
    - name: TARGET_GH_REPO
      description: GitHub repository of the infra-deployments code
      default: prietyc123/infra-deployments
    - name: GIT_IMAGE
      description: Image reference containing the git command
      default: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8:v1.8.2-8@sha256:a538c423e7a11aae6ae582a411fdb090936458075f99af4ce5add038bb6983e8
    - name: shared-secret
      default: infra-deployments-pr-creator
      description: secret in the namespace which contains private key for the GitHub App
    - name: GITHUB_APP_ID
      description: ID of Github app used for updating PR
      default: "288147"
    - name: GITHUB_APP_INSTALLATION_ID
      description: Installation ID of Github app in the organization
      default: "33726981"
  workspaces:
   - name: infra-deployment-git
  volumes:
    - name: infra-deployments-pr-creator
      secret:
        # 'private-key' - private key for Github app
        secretName: $(params.shared-secret)
  steps:
    # - name: reset-changes
    #   image: quay.io/openshift-pipeline/ci
    #   workingDir: $(workspaces.infra-deployment-git.path)
    #   script: |
    #     # git config --global --add safe.directory $(workspaces.infra-deployment-git.path)
    #     # git checkout preview-POCPromotionToProd
    #     git config --global --add safe.directory /workspace/infra-deployment-git
    #     git reset --hard $(params.REVISION)

    #     git status -s --porcelain | cut -c4- > rollback_files.txt
    - name: create-mr
      image: quay.io/redhat-appstudio/github-app-token@sha256:b4f2af12e9beea68055995ccdbdb86cfe1be97688c618117e5da2243dc1da18e
      workingDir: $(workspaces.infra-deployment-git.path)
      volumeMounts:
        - name: infra-deployments-pr-creator
          mountPath: /secrets/deploy-key
      env:
        - name: GITHUBAPP_KEY_PATH
          value: /secrets/deploy-key/private-key
        - name: GITHUBAPP_APP_ID
          value: "$(params.GITHUB_APP_ID)"
        - name: GITHUBAPP_INSTALLATION_ID
          value: "$(params.GITHUB_APP_INSTALLATION_ID)"
        - name: GITHUB_API_URL
          value: https://api.github.com
        - name: REVISION
          value: $(params.REVISION)
        - name: TARGET_GH_REPO
          value: "$(params.TARGET_GH_REPO)"
      script: |
        #!/usr/bin/env python3
        import json
        import os
        import time
        import base64
        import subprocess

        import requests
        from jwcrypto import jwk, jwt

        EXPIRE_MINUTES_AS_SECONDS = int(os.environ.get('GITHUBAPP_TOKEN_EXPIRATION_MINUTES', 10)) * 60
        # TODO support github enteprise
        GITHUB_API_URL = os.environ.get('GITHUB_API_URL')


        class GitHub():
            token = None

            def __init__(self, private_key, app_id=None, installation_id=None):
                if not isinstance(private_key, bytes):
                    raise ValueError(f'"{private_key}" parameter must be byte-string')
                self._private_key = private_key
                self.app_id = app_id
                self.token = self._get_token(installation_id)

            def _load_private_key(self, pem_key_bytes):
                return jwk.JWK.from_pem(pem_key_bytes)

            def _app_token(self, expire_in=EXPIRE_MINUTES_AS_SECONDS):
                key = self._load_private_key(self._private_key)
                now = int(time.time())
                token = jwt.JWT(
                    header={"alg": "RS256"},
                    claims={
                        "iat": now,
                        "exp": now + expire_in,
                        "iss": self.app_id
                    },
                    algs=["RS256"],
                )
                token.make_signed_token(key)
                return token.serialize()

            def _get_token(self, installation_id=None):
                app_token = self._app_token()
                if not installation_id:
                    return app_token

                req = self._request(
                    "POST",
                    f"/app/installations/{installation_id}/access_tokens",
                    headers={
                        "Authorization": f"Bearer {app_token}",
                        "Accept": "application/vnd.github.machine-man-preview+json"
                    })

                ret = req.json()
                if 'token' not in ret:
                    raise Exception(f"Authentication errors: {ret}")

                return ret['token']

            def _request(self, method, url, headers={}, data={}):
                if self.token and 'Authorization' not in headers:
                    headers.update({"Authorization": "Bearer " + self.token})
                if not url.startswith("http"):
                    url = f"{GITHUB_API_URL}{url}"
                return requests.request(method,
                                        url,
                                        headers=headers,
                                        data=json.dumps(data))
            
            def revert_mr(self):
                commit = os.environ.get('REVISION')
                cmd = ['git', 'revert', '-m', '1', f"{commit}", "--no-edit"]
                cmd_string = " ".join(cmd)
                output = subprocess.Popen(cmd_string.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                stdout, stderr = output.communicate()
                # subprocess.run(['git', 'revert', '-m', '1', commit], check=True)
                # git revert -m 1 f"{commit}"
                cmd = ['git', 'diff', '--name-only', f"{commit}^", f"{commit}"]
                cmd_string = " ".join(cmd)
                output = subprocess.Popen(cmd_string.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                stdout, stderr = output.communicate()

                print(f"hello {stdout.decode('utf-8')}")

                # Write the stdout to the output file
                with open('../rollback_files.txt', 'w') as output_file:
                    output_file.write(stdout.decode('utf-8'))
                
                if stderr:
                    print(f"Error: {stderr.decode('utf-8')}")
                else:
                    print("Output written to rollback_files.txt")

            def create_mr(self):
                repo_name = "rollback-" + os.environ.get('REVISION')[:12]
                commit = os.environ.get('REVISION')[:12]
                target_gh_repo = os.environ.get('TARGET_GH_REPO')
                req = self._request(
                    "POST",
                    f"/repos/{target_gh_repo}/pulls",
                    headers={
                        "Authorization": f"Bearer {self.token}",
                        "Accept": "application/vnd.github.v3+json"
                    },
                    data={
                        "head": repo_name,
                        "base": "preview-POCPromotionToProd",
                        "title": f"Rollback commit {commit}",
                        "maintainer_can_modify": False
                    })
                json_output = req.json()
                print(json_output)
                return json_output

            def create_reset_branch(self):
                branch = "rollback-" + os.environ.get('REVISION')[:12]
                target_gh_repo = os.environ.get('TARGET_GH_REPO')
                target_branch = self._request("GET", f"/repos/{target_gh_repo}/git/refs/heads/{branch}").json()
                main_branch_sha = self._request("GET", f"/repos/{target_gh_repo}/git/refs/heads/main").json()['object']['sha']
                if "ref" in target_branch:
                    # update branch
                    self._request(
                        "PATCH",
                        f"/repos/{target_gh_repo}/git/refs/heads/{branch}",
                        data={"sha": main_branch_sha, "force": True}
                    )
                else:
                    # create branch
                    self._request(
                        "POST",
                        f"/repos/{target_gh_repo}/git/refs",
                        data={"sha": main_branch_sha, "ref": f"refs/heads/{branch}"}
                    )
            def upload_content(self):
              branch = "rollback-" + os.environ.get('REVISION')[:12]
              target_gh_repo = os.environ.get('TARGET_GH_REPO')
              with open('../rollback_files.txt', 'r') as file_list:
                  for file in file_list:
                      file = file.strip()
                      with open(file, "rb") as fd:
                          encoded_string = base64.b64encode(fd.read()).decode("utf-8")
                      old_sha = self._request("GET", f'/repos/{target_gh_repo}/contents/{file}').json().get("sha")
                      if old_sha is None:
                          self._request("PUT", f'/repos/{target_gh_repo}/contents/{file}', data={"message": f"update {file}", "branch": branch, "content": encoded_string})
                      else:
                          self._request("PUT", f'/repos/{target_gh_repo}/contents/{file}', data={"message": f"update {file}", "branch": branch, "content": encoded_string, "sha": old_sha})


            # def upload_content(self):
            #     branch = "rollback-" + os.environ.get('REVISION')[:12]
            #     target_gh_repo = os.environ.get('TARGET_GH_REPO')
            #     for file in open('rollback_files.txt').readlines():
            #         file = file.strip()
            #         with open(f"{file}", "rb") as fd:
            #             encoded_string = base64.b64encode(fd.read()).decode("utf-8")
            #         old_sha = self._request("GET", f'/repos/{target_gh_repo}/contents/{file}').json().get("sha")
            #         if old_sha is None:
            #             self._request("PUT", f'/repos/{target_gh_repo}/contents/{file}', data={"message": f"update {file}", "branch": branch, "content": encoded_string})
            #         else:
            #             self._request("PUT", f'/repos/{target_gh_repo}/contents/{file}', data={"message": f"update {file}", "branch": branch, "content": encoded_string, "sha": old_sha})
            def get_pr(self):
                branch = "rollback-" + os.environ.get('REVISION')[:12]
                target_gh_repo = os.environ.get('TARGET_GH_REPO')
                req = self._request(
                    "GET",
                    f"/repos/{target_gh_repo}/pulls",
                    headers={
                        "Accept": "application/vnd.github.v3+json"
                    })
                json_output = req.json()
                for item in json_output:
                    if item["user"]["login"].endswith("[bot]") and item["head"]["ref"] == branch:
                        return item
            def get_pr_url_from_sha(self, sha):
                req = self._request(
                    "GET",
                    f"/search/issues?q={sha}",
                    headers={
                        "Accept": "application/vnd.github.v3+json"
                    })
                return req.json()["items"][0]["pull_request"]["html_url"]
            def update_mr_description(self, pr_url, description):
                req = self._request(
                    "PATCH",
                    pr_url,
                    headers={
                        "Authorization": f"Bearer {self.token}",
                        "Accept": "application/vnd.github.v3+json"
                    },
                    data={ "body": description })
                json_output = req.json()
                print(json_output)

        def main():
            commit = os.environ.get('REVISION')
            with open(os.environ['GITHUBAPP_KEY_PATH'], 'rb') as key_file:
                key = key_file.read()

            if os.environ.get('GITHUBAPP_APP_ID'):
                app_id = os.environ['GITHUBAPP_APP_ID']
            else:
                raise Exception("application id is not set")

            print(f"Getting user token for application_id: {app_id}")
            github_app = GitHub(
                key,
                app_id=app_id,
                installation_id=os.environ.get('GITHUBAPP_INSTALLATION_ID'))

            github_app.create_reset_branch()
            github_app.revert_mr()
            github_app.upload_content()
            infra_pr = github_app.create_mr()
            if "url" not in infra_pr:
                infra_pr = github_app.get_pr()
            # description = infra_pr["body"]
            description = f"Rollback PR for commit: {commit}"
            # if description == None:
            #     description = f"Rollback PR for commit: {commit}"
            github_app.update_mr_description(infra_pr["url"], description)

        if __name__ == '__main__':
            main()